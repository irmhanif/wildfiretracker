{"version":3,"sources":["components/LocationInfoBox.js","components/LocationMarker.js","components/Map.js","backend.js","spinner.gif","components/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationInfoBox","info","className","id","title","LocationMarker","lat","lng","onClick","icon","locationIcon","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","index","categories","geometries","coordinates","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAaeA,EAZS,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACtB,OACI,sBAAKC,UAAU,gBAAf,UACI,qDACA,+BACI,sCAAQ,iCAASD,EAAKE,QACtB,yCAAW,iCAASF,EAAKG,kB,uBCI1BC,EARQ,SAAC,GAAiC,EAA/BC,IAA+B,EAA1BC,IAA2B,IAAtBC,EAAqB,EAArBA,QAAqB,EAAZJ,MAC3C,OACE,qBAAKF,UAAU,kBAAkBM,QAASA,EAA1C,SACE,cAAC,OAAD,CAAMC,KAAMC,IAAcR,UAAU,qBCApCS,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EACHC,mBAAS,MADN,mBACpCC,EADoC,KACtBC,EADsB,KAGrCC,EAAUN,EAAUO,KAAI,SAACC,EAAIC,GACjC,OAA4B,IAAxBD,EAAGE,WAAW,GAAGnB,GAEjB,cAAC,EAAD,CAEEG,IAAKc,EAAGG,WAAW,GAAGC,YAAY,GAClCjB,IAAKa,EAAGG,WAAW,GAAGC,YAAY,GAClCpB,MAAOgB,EAAGE,WAAW,GAAGlB,MACxBI,QAAS,kBAAMS,EAAgB,CAAEd,GAAIiB,EAAGjB,GAAIC,MAAOgB,EAAGhB,UAJjDiB,GAQJ,QAET,OACE,sBAAKnB,UAAU,MAAf,UACE,cAAC,IAAD,CACEuB,iBAAkB,CAChBC,IC3BSC,2CD6BXC,cAAef,EACfgB,YAAaf,EALf,SAOGI,IAEFF,GAAgB,cAAC,EAAD,CAAiBf,KAAMe,QAI9CL,EAAImB,aAAe,CACjBjB,OAAQ,CACNP,IAAK,QACLC,IAAK,SAEPO,KAAM,GAEOH,QE7CA,MAA0B,oCCU1BoB,EARA,WACX,OACE,qBAAK7B,UAAU,SAAf,SACE,qBAAK8B,IAAKC,EAASC,IAAI,WCUhBC,EAXA,WAEX,OACE,wBAAQjC,UAAU,SAAlB,SACE,+BACE,cAAC,OAAD,CAAMO,KAAMC,MADd,4CC8BO0B,MAhCf,WAAgB,IAAD,EAEqBrB,mBAAS,IAF9B,mBAENH,EAFM,KAEKyB,EAFL,OAGiBtB,oBAAS,GAH1B,mBAGNuB,EAHM,KAGGC,EAHH,KAoBb,OAfAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAChB,mDAHgB,cAEZC,EAFY,gBAKOA,EAAIC,OALX,gBAKVC,EALU,EAKVA,OAERR,EAAaQ,GACbN,GAAW,GARO,4CAAH,qDAWjBO,KACC,IAGD,gCACE,cAAC,EAAD,IACER,EAGA,cAAC,EAAD,IAFA,cAAC,EAAD,CAAK1B,UAAWA,QClBTmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.44022482.chunk.js","sourcesContent":["\r\nconst LocationInfoBox = ({info}) => {\r\n    return (\r\n        <div className='location-info'>\r\n            <h2>Event Location Info</h2>\r\n            <ul>\r\n                <li>ID: <strong>{info.id}</strong></li>\r\n                <li>TITLE: <strong>{info.title}</strong></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationInfoBox\r\n","import {Icon} from '@iconify/react';\r\nimport locationIcon from '@iconify/icons-mdi/fire-alert';\r\n\r\nconst LocationMarker = ({ lat, lng, onClick, title }) => {\r\n  return (\r\n    <div className=\"location-marker\" onClick={onClick}>\r\n      <Icon icon={locationIcon} className=\"location-icon\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationMarker\r\n","import GoogleMapReact from \"google-map-react\";\r\nimport { API } from \"../backend\";\r\nimport LocationInfoBox from \"./LocationInfoBox\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport { useState } from \"react\";\r\n\r\nconst Map = ({ eventData, center, zoom }) => {\r\n  const [locationInfo, setLocationInfo] = useState(null);\r\n\r\n  const markers = eventData.map((ev, index) => {\r\n    if (ev.categories[0].id === 8) {\r\n      return (\r\n        <LocationMarker\r\n          key={index}\r\n          lat={ev.geometries[0].coordinates[1]}\r\n          lng={ev.geometries[0].coordinates[0]}\r\n          title={ev.categories[0].title}\r\n          onClick={() => setLocationInfo({ id: ev.id, title: ev.title })}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n  return (\r\n    <div className=\"map\">\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{\r\n          key: API,\r\n        }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n      >\r\n        {markers}\r\n      </GoogleMapReact>\r\n      {locationInfo && <LocationInfoBox info={locationInfo} />}\r\n    </div>\r\n  );\r\n};\r\nMap.defaultProps = {\r\n  center: {\r\n    lat: 20.5937,\r\n    lng: 78.9629,\r\n  },\r\n  zoom: 1,\r\n};\r\nexport default Map;\r\n","export const API = process.env.REACT_APP_GOOGLE_API;\r\n","export default __webpack_public_path__ + \"static/media/spinner.a74b50f6.gif\";","import React from 'react'\r\nimport spinner from './../spinner.gif';\r\nconst Loader = () => {\r\n    return (\r\n      <div className=\"loader\">\r\n        <img src={spinner} alt=\"gif\" />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport { Icon } from \"@iconify/react\";\r\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\";\r\n\r\nconst Header = () => {\r\n    \r\n    return (\r\n      <header className=\"header\">\r\n        <h1>\r\n          <Icon icon={locationIcon} /> Wildfire Tracker (Powered By NASA)\r\n        </h1>\r\n      </header>\r\n    );\r\n}\r\n\r\nexport default Header\r\n","import Map from \"./components/Map\";\nimport {useState, useEffect} from 'react';\nimport Loader from \"./components/Loader\";\nimport Header from \"./components/Header\";\n\n\nfunction App() {\n\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch(\n        \"https://eonet.sci.gsfc.nasa.gov/api/v2.1/events\"\n      )\n      const { events } = await res.json();\n\n      setEventData(events);\n      setLoading(false);\n      \n    }\n    fetchEvents()\n  }, [])\n\n  return (\n    <div>\n      <Header />\n      {!loading ? (\n        <Map eventData={eventData} />\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}